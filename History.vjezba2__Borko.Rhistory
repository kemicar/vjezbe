vec7<-c(1.237,2.944,3,4,5.5222)
vec7[3]
#to je 3. vektor
vec7<-c(1.237,2.944,3,4,5.5222)
vec7[3]
print(vec7)
vec7[3:5]
#brisanje
vec7[-3]
print(vec7)
#i dalje je tu 3. broj jer nismo spremili novi vector
vec7b<-vec7[-3]
vec7b
#sad vise nema 3. elementa
vec7c<-vec7[-1]
vec7c
vec7a<-vec7[[-2]
#R works in scientific notation
vec8<-c(1E-3,1E4)
#R works in scientific notation
vec8<-c(1E-3,1E4)
#natural logarithm calculation
#natural logarithm calculation
#sad s tim vektorom možemo svasta npr log..
#E=10
#natural logarithm calculation
#sad s tim vektorom možemo svasta npr log..
log(vec8)
#log with base 10
log10(vec8)
log(vec8,base=2)
log(vec8,base=10)
log(vec8,base=10)
#exponential function
exp(vec8)
#cut kategorizacija vector elements
#inf means infinity
#cut kategorizacija vector elements
vec9<-c(21,22,19,25,28,32,23.5)
ervla otpr jednaka
#hocemo vec9 u 3 intervla otpr jednaka
#za to koristimo cut
cut_vec9
cut_vec9<-cut(vec9,breaks=3)
cut_vec9
uded, sem a i b
numbers included, sem a i b
#(a,b)-open interval, all numbers included, sem a i b
#[a,b]-closed interval, including a, b
#varijacije: (a,b], [a,b)
cut_vec9<-cut(vec9,breaks=3,right=F)
?cut
cut_vec9
cut_vec9<-cut(vec9,breaks=3,right=T)
#hocemo vec9 u 3 intervla otpr jednaka
#za to koristimo cut
cut_vec9
#hocemo vec9 u 3 intervla otpr jednaka
#za to koristimo cut
#R calculates range- 13 u slucaju od 19 do 32
cut_vec9
#hocemo vec9 u 3 intervla otpr jednaka
#za to koristimo cut
#R calculates range- 13 u slucaju od 19 do 32 i ako hocemo u 3 intervala onda to
cut_vec9
#hocemo vec9 u 3 intervla otpr jednaka
#za to koristimo cut
#R calculates range- 13 u slucaju od 19 do 32 i ako hocemo u 3 intervala onda to ispadne 4,3 i zato imamo 23,3
cut_vec9
cut_vec9<-cut(vec9,breaks=3,right=T)
#revesersed notation zato koristimo T,F
vec10<-c(2:5)
vec10
#dijelimo ovaj vector u 2 intervala
cut_vec10<-cut(vec10,breaks=2)
print(cut_vec10)
cut_vec10<-cut(vec10,breaks=2,labels=c("Group1","Group2"))
print(cut_vec10)
print(vec10)
#kod koristenja godina npr
vec10
split_vector<-c(0,2,4,6)
#sa split splitamo vec10
split_vector
#divide vec10 sa split_vector
split_vec10<-cut(vec10,breaks=split_vector)
vec10
split_vec10
#sami odredjujemo koliki su intervali, zato je korisno
#sami odredjujemo koliki su intervali, zato je korisno
#vec10 hocemo labelat
#3 intervala imamo
#sami odredjujemo koliki su intervali, zato je korisno
#vec10 hocemo labelat
category<-cut(vec10, breaks=split_vector,labels=c("first","second","third"))
print(category)
#3 intervala imamo
#sami odredjujemo koliki su intervali, zato je korisno
#vec10 hocemo labelat
category<-cut(vec10, breaks=split_vector,labels=c("first","second","third"),ordered_result=T)
print(category)
#3 intervala imamo
#sami odredjujemo koliki su intervali, zato je korisno
#vec10 hocemo labelat
category<-cut(vec10, breaks=split_vector,labels=c("first","second","third"),ordered_result=F)
print(category)
?breaks
?cut
?cut
#text vectors
text_vec<-"Chemometrics, is,cool"
#splitting the vector based on comma
strsplit(text_vec,",")
#2 vektora, pr gen and stop codon- splitting the first vector based on the second
gene<-"ARGCTGUUAGCTUGT"
stopcodon<-"UAG"
strsplit(gene,stopcodon)
#taj rezult mozemo nazvat pr polypeptides kao novi vector
polypeptides<-strsplit(gene,stopcodon)
polypeptides
#paste smthn back
gene2<-paste(gene,stopcodon)
gene2
#task
ages<-c(22,24,28,16,12,18,35,33,72,65)
ages
age_groups<-cut(ages,breaks=(0,30,60,Inf),labels=c("young","middle-aged","elderly"))
age_groups<-cut(ages,breaks=(0,30,60,inf),labels=c("young","middle-aged","elderly"))
age_groups<-cut(ages,breaks=(0,30,60,Inf),labels=c("young","middle-aged","elderly"))
age_groups<-cut(ages,breaks=c(0,30,60,Inf),labels=c("young","middle-aged","elderly"))
age_groups
ages
o je c ispred breaks!!-zato error
breaks!!-zato error
!-zato error
#falilo je c ispred breaks!!-zato error
#lists
#kombinacija vektora
#3 vectora koje hocemo u 1
vec1<-c(1,2,3,4,5,6,7,8,9)
vec3<-c("severe","mild","control")
vec4<-as.factor(c("severe","mild","control"))
list_vec<-list(vec3,vec4,vec1)
print(list_vec)
#ako hoces access prvom elementu s liste []
list_vec[1]
#ako hoces access prvom elementu s liste []
list_vec[9]
length(list_vec)
#remove elements from list
list_vec[1]<-NULL
length(list_vec)
#split list in 3 parts
list_vec<-list(vec3,vec4,vec1)
print(list_vec)
first_part<-list_vec[1:2]
second_part<-list_vec[3]
#1.dio sadrzi orva 2 elementa, a 2. dio 3. element
first_part
second_part
second_part<-list_vec[2:3]
first_part<-list_vec[1,3]
#1.dio sadrzi orva 2 elementa, a 2. dio 3. element
first_part
second_part
#2D data
#matrix
#2D data
?matrix
vec11<-c(1:10)
mat<-matrix(vec11,ncol=5,nrow=2)
mat
#matrix sa 5 columns i 2 rows
mat<-matrix(vec11,5,2)
view(mat)
View(mat)
mat<-matrix(vec11,2,5)
mat2<-matrix(vec11,2,5)
mat2
mat
print(mat)
print(mat2)
View(mat2)
#ista pravila za matrix i vector
mat[2,2]
mat
#ista pravila za matrix i vector
mat[2,3]
#ista pravila za matrix i vector
mat[1,3]
mat
mat[1:5,2]
mat[2,1:5]
mat[2,1:2]
#error jer su samo 2 columns
mat[c(2,5),2]
mat
#changing column and row names
colnames(mat)<.c(a,b)
#changing column and row names
colnames(mat)<-c(a,b)
rownames(mat)<-c("c","d","e","f","g")
mat
View(mat)
#changing column and row names
colnames(mat)<-c("a","b")
rownames(mat)<-c("c","d","e","f","g")
View(mat)
View(mat)
#changing column and row names
rownames(mat)<-c("a","b")
colnames(mat)<-c("c","d","e","f","g")
mat
View(mat)
edat br columns i rows
s
ws
#treba gledat br columns i rows
#funkcije
#a code which runs when called
#function that adds 2 numbers
suma<-function(x,y) {zbroj<-x+y return(zbroj)}
suma(1,2)
suma(5,-7)
#treba gledat br columns i rows
#funkcije
#a code which runs when called
#function that adds 2 numbers
suma<-function(x,y){zbroj<-x+y return(zbroj)}
#treba gledat br columns i rows
#funkcije
#a code which runs when called
#function that adds 2 numbers
suma<-function(x,y)[zbroj<-x+y return(zbroj)]
#treba gledat br columns i rows
#funkcije
#a code which runs when called
#function that adds 2 numbers
suma<-function(x,y){zbroj<-x+y return(zbroj)}
#treba gledat br columns i rows
#funkcije
#a code which runs when called
#function that adds 2 numbers
suma<-function(x,y) {zbroj<-x+y
return(zbroj)
}
suma(1,2)
suma(5,-7)
znati kad idu viticaste zagrade i u koliko redova jer inace kaze error!!
viticaste zagrade i u koliko redova jer inace kaze error!!
#moras znati kad idu viticaste zagrade i u koliko redova jer inace kaze error!!
#task1
#substracts 3 numbers
oduzimanje<-function(x,y,z) {
minus<-x,y,z
#moras znati kad idu viticaste zagrade i u koliko redova jer inace kaze error!!
#task1
#substracts 3 numbers
oduzimanje<-function(x,y,z) {
zbroj<-x,y,z
#moras znati kad idu viticaste zagrade i u koliko redova jer inace kaze error!!
#task1
#substracts 3 numbers
oduzimanje<-function(x,y,z) {
zbroj<-x-y-z
return(zbroj)
}
primjer1<-oduzimanje(1,2,3)
primjer1
primjer2<-oduzimanje(5,-7,9)
primjer2
logsuma<-function(val1,val2) {
zbroj<-log10(val1)+log10(val2)
return(zbroj)
}
primjer3<-logsuma(2,5)
primjer3
culation based on konc
#task 2-function for pH calculation based on konc
#use -log10 for calculation
pH<-function(konc){
pH_vrijednost<--log10(konc)
return(pH_vrijednost)
}
pH(0.005)
pH(3E-3)
#calculate toxic unit (EC50)
toxic_unit<-function(conc,a50){
tu<-conc/ac50
ltu<-log10(tu)
return(ltu)
}
primjer4<-toxic_unit(0.005,0.01)
primjer4
concentration<-0.005
ac50<-0.01
#calculate toxic unit (EC50)
toxic_unit<-function(conc,a50){
tu<-conc/ac50
ltu<-log10(tu)
return(ltu)
}
primjer4<-toxic_unit(0.005,0.01)
primjer4
concentration<-0.005
primjer5<-toxic_unit(concentration,ac50)
primjer5
sava_spojevi<-c(0.01,0.002,0.0005)
ac50<-c(0.34,1.5,0.001)
primjer6<-toxic_unit(sava_spojevi,ac50)
primjer6
bmi_classifier<-function(m,v){
bmi_calculation<25) {
primjer7<-bmi_classifier(76,1.83)
primjer7
bmi_classifier<-function(m,v){
bmi_calculation<25) {
bmi_classifier<-function(m,v){
bmi_calculation<- m/v**2)
bmi_classifier<-function(m,v){
bmi_calculation<- m/v**2
if(bmi_calculation<25) {
bmi_class<-"Good"
} else {
bmi_class<-"Could be better"
}
return(c(bmi_calculation, bmi_class))
}
primjer7<-bmi_classifier(76,1.83)
primjer7
#task3- -log10, if else, acid pH<7, alkaline ph>7
#task3= -log10, if else, acid pH<7, alkaline ph>7
#pazi na zagrade!!
#task3= -log10, if else, acid pH<7, alkaline ph>7
pH<-function(konc) {
pH_vrijednost<- -log10(konc)
if(pH_vrijednost<7) {
pH_klasa<-"acid"
} else {
pH_klasa<-"alkaline"
}
return(c(pH_vrijednost,pH_klasa))
}
pH(0.002)
pH(4E-8)
#big data sets aved in one place
#example tydiverse id for data science
#big data sets aved in one place
#example tydiverse id for data science
#every package needs installing
#packages
#big data sets aved in one place
#example tydiverse id for data science
#every package needs installing
install.packages("tidyverse")
kraj help dolje desno) se vide svi instlairani paketi
#na window packages(kraj help dolje desno) se vide svi instlairani paketi
#load pomocu library
library("tidyverse")
je loaded
#na taj nacin provjerimo dal je loaded
#jos jedan nacin za provjeru
stopifnot(require("tidyverse"))
stopifnot(getRversion()>="4.1.0")
getRversion()
brary
#1. install a poslije library
#dataframes-lists with vectors
#moraju bit equally long
vec1<-c(1,2,3,4,5,6,7,8,9)
vec2<-c(T,F,F,T,F,F,F,T,T)
vec3<-sqrt(vec1**2)
data.frame(vec1,vec2,vec3)
di data frame sa zadanim vectorima a svi moraju bit istih duljina
#data.frame radi data frame sa zadanim vectorima a svi moraju bit istih duljina
#df=data frame
df1<-data.frame(vec1,vec2,vec3)
df1
df2<-data.frame(yes_no=vec2,patient=vec3)
print(df2)
#ovaj df2 je df sa 2 columns u kojoj 1. ima logaritamsku vrijednost a druga numericku
View(df2)
#ovaj df2 je df sa 2 columns u kojoj 1. ima logaritamsku vrijednost a druga numericku
View(df2)
view(df2)
erse paket, a veliko je base package u R
v; malo je tidyverse paket, a veliko je base package u R
#razlika malo i veliko v; malo je tidyverse paket, a veliko je base package u R
#ako hocemo save (export) table as .txt
#koristimo write.table
write.table(x=df2,
file="pokusaj.txt",
row.names=F,
col.names=T,
sep=";")
)
#ako zab where we are (directory=map)
#files i onda home i ostatak pise di nam se nalazi
#razlika malo i veliko v; malo je tidyverse paket, a veliko je base package u R
#ako hocemo save (export) table as .txt
#koristimo write.table
write.table(x=df2,
file="pokusaj.txt",
row.names=F,
col.names=T,
sep=";")
#razlika malo i veliko v; malo je tidyverse paket, a veliko je base package u R
#ako hocemo save (export) table as .txt
#koristimo write.table
write.table(x=df2,
file="pokusaj.txt",
row.names=F,
col.names=T,
sep=";")
#ako zab where we are (directory=map)
#files i onda home i ostatak pise di nam se nalazi
#comma, tab(/t), semicolon(;), space()
#ako zab where we are (directory=map)
#files i onda home i ostatak pise di nam se nalazi
getwd()
di se nalazi taj file
header=TRUE,
header=TRUE,
header=TRUE,
header="TRUE",
#getwd() nam pokaze di se nalazi taj file
#loadanje .txt file
tablica<-read.table(file= "pokusaj.txt",
sep=";"
header=TRUE,
#getwd() nam pokaze di se nalazi taj file
#loadanje .txt file
tablica<-read.table(file= "pokusaj.txt",
sep=";"
header=TRUE,
#getwd() nam pokaze di se nalazi taj file
#loadanje .txt file
tablica<-read.table(file= "pokusaj.txt",
sep=";"
header=TRUE,
#getwd() nam pokaze di se nalazi taj file
#loadanje .txt file
tablica<-read.table(file= "pokusaj.txt",
sep=";"
header=TRUE,
header=TRUE,
#getwd() nam pokaze di se nalazi taj file
#loadanje .txt file
tablica<-read.table(file="pokusaj.txt",
sep=";",
header=TRUE,
stringsAsFactors=T)
View(tablica)
savehistory("~/sistemska/History.vjezba2_Borko.Rhistory")
alio zarez nakon sep!!-nemoj zab na to!!
!!-nemoj zab na to!!
!!-nemoj zab na to!!
falio zarez nakon sep!!-nemoj zab na to!!
zarez nakon sep!!-nemoj zab na to!!
falio zarez nakon sep!!-nemoj zab na to!!
emoj zab na to!!
on sep!!-nemoj zab na to!!
savehistory("~/sistemska/History.vjezba2__Borko.Rhistory")
